import React from 'react'
import PropTypes from 'prop-types'
import Icon from '../Icon'
import FlexView from '../layoutComponents/FlexView'

class AccordionItemTitle extends React.Component {
  render () {
    let arrow = 'down'
    let fill = ''
    if (this.props.isSelected) {
      fill = 'Fill'
      if (this.props.multiSelect) {
        arrow = 'up'
      }
    }
    const click = e => {
      if (e.type === 'mousedown' && 'ontouchstart' in document.documentElement) {
        return
      }
      this.props.accordionOnClick(this.props.listId)
    }
    return (
      <div
        style={{ width: '100%' }}
        onMouseDown={click}
        onTouchStart={click}
        tabIndex='-1'
        role='button'
        aria-pressed='true'
      >
        <FlexView
          style={{
            ...{
              flexDirection: 'row',
              cursor: 'pointer',
              minHeight: Math.floor(this.props.titleHeight - 1),
              maxHeight: Math.floor(this.props.titleHeight - 1),
              height: Math.floor(this.props.titleHeight - 1),
              overflow: 'hidden'
            },
            ...this.props.style
          }}
        >
          {React.Children.count(this.props.children) < 1 && (
            <FlexView
              style={{
                justifyContent: 'space-between'
              }}
            >
              <div style={{ paddingLeft: 10 }}>
                {this.props.icon !== 'none' && (
                  <Icon name={`${this.props.icon}${fill}`} type='system' width={16} height={16} />
                )}
              </div>
              <div>
                <h3>{this.props.title}</h3>
              </div>
              <div style={{ paddingRight: 15 }}>
                <Icon name={arrow} type='functional' width={16} height={16} />
              </div>
            </FlexView>
          )}
          {this.props.children}
        </FlexView>
      </div>
    )
  }
}

AccordionItemTitle.defaultProps = {
  accordionOnClick: () => {},
  titleHeight: 65,
  icon: 'none',
  isSelected: false,
  systemName: 'AccordionItemTitle'
}
AccordionItemTitle.propTypes = {
  /**
   * OnClick callback function bubble up to Accordion component. (System use only).
   */
  accordionOnClick: PropTypes.func,
  /**
   * Id (array index) in the accordion items array. (System use only).
   */
  listId: PropTypes.number,
  /**
   * Internal use for the accordion. (System use only).
   */
  systemName: PropTypes.string, //  eslint-disable-line react/no-unused-prop-types
  /**
   * Selected index of the child array. (System use only).
   */
  isSelected: PropTypes.bool,
  /**
   * Override or extend default styles.
   */
  style: PropTypes.object,
  /**
   * Automatic generated by Accordion options. (System use only).
   */
  titleHeight: PropTypes.number,
  /**
   * Icon ket string to located icon in the icon component.
   */
  icon: PropTypes.string,
  /**
   * Text for title in the bar
   */
  title: PropTypes.string,
  /**
   * Content of the Accordion Item Title. If elements are placed
   * inside the component it will override the preset content. (System use only)
   */
  children: PropTypes.oneOfType([
    PropTypes.array,
    PropTypes.element,
    PropTypes.string,
    PropTypes.number
  ]),
  /**
   * Changes behavor on the accordionTitle. If false the arrow to
   * the right will always point down. If true the arrow will point
   * up if current item is selected and opened. The value will be
   * provided by the Accordion component. (System use only)
   */
  multiSelect: PropTypes.bool
}

export default AccordionItemTitle
